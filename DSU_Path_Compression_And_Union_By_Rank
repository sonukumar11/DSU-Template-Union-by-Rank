class DisjointSet {
private:
    vector<int> parent;
    vector<int> rank;
public:
    DisjointSet(int size) {
        parent.resize(size, -1);
        rank.resize(size, 0); 
    }
    int find(int node) {
        if(parent[node] == -1){
            return node;
        }
        
        //For the path Compression
        return parent[node] = find(parent[node]);
    }
    
    //Remember that the rank will only change in case rank of Two Absolute
    //Parent are equal
    
    void join(int x, int y) {
        int parX = find(x);
        int parY = find(y);
        
        if (parX == parY){
            return;
        } 
        
        if (rank[parX] > rank[parY]) {
            parent[parY] = parX;
        }
        else if (rank[parX] < rank[parY]) {
            parent[parX] = parY;
        }
        else {
            parent[parY] = parX;
            rank[parX]++;
        }
    }
    
};

class Solution {
public:
    int numberOfGoodPaths(vector<int>& vals, vector<vector<int>>& edges) {
        int n = vals.size();
        vector<int> adj[n];
        
        for (auto& edge : edges) {
            int nodeA = edge[0];
            int nodeB = edge[1];
            if (vals[nodeA] >= vals[nodeB]) {
                adj[nodeA].push_back(nodeB);
            }
            if (vals[nodeA] <= vals[nodeB]) {
                adj[nodeB].push_back(nodeA);
            }
        }
        
        int goodPath = 0;
        
        //value -> nodes with the same values
        map<int , vector<int>> myMap;
        for(int i=0;i<vals.size();i++){
            myMap[vals[i]].push_back(i);
        }
        
        //connecting nodes with same value and their adjacency nodes in the same
        //component
        
        DisjointSet* disjointSet = new DisjointSet(n);
        vector<int> parent(n , -1);
        for(auto i : myMap){
            for(auto sameNodes:i.second){
                for(auto it:adj[sameNodes]){
                    disjointSet -> join(sameNodes , it);
                }
            }
            
            unordered_map<int , int> makeGroups;
            for(int u:i.second){
                makeGroups[disjointSet -> find(u)]++;
            }
            
            goodPath += i.second.size();
            
            for(auto p:makeGroups){
                goodPath += (p.second * (p.second - 1) / 2);
            }
        }
        
        return goodPath;
    }
};
